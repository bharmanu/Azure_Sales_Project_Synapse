{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "ap203workspacesynapse"
		},
		"ap203workspacesynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ap203workspacesynapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:ap203workspacesynapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_ap203storageaccount_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_ap203storageaccount'"
		},
		"ap203workspacesynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ap203synapsestorage.dfs.core.windows.net"
		},
		"ls_ap203keyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ap203keyvault1.vault.azure.net/"
		},
		"ls_ap203storageaccount_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ap203storageaccount.dfs.core.windows.net/"
		},
		"ls_serverless_sales_ldw_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "tcp:ap203workspacesynapse-ondemand.sql.azuresynapse.net,1433"
		},
		"ls_serverless_sales_ldw_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sales_ldw"
		},
		"ls_synapsestorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ap203synapsestorage.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_synapse_silver_fact')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_l34",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "data/fact/processed/FactInternetSales/"
							},
							{
								"name": "Destination",
								"value": "data/silver/fact_sales/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_l34",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_l34",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-12T00:25:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_l34')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_l34')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_Load_Processed_Silver_Fact')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_processed_fact",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_processed_fact",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_processed_fact_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-11T17:28:30Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_processed_fact')]",
				"[concat(variables('workspaceId'), '/datasets/ds_processed_fact_sales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_Load_Silver_Dim')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach Silver Dim",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_sp_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete_Silver_Dim_Files",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_synapse_adls_silver",
											"type": "DatasetReference",
											"parameters": {
												"folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Load_Silver_Dim_Ext_Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete_Silver_Dim_Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().sp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sales_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folder_sp_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/dim_customer",
								"sp_name": "silver.sp_silver_dim_customer"
							},
							{
								"folder_path": "silver/dim_date",
								"sp_name": "silver.sp_silver_dim_date"
							},
							{
								"folder_path": "silver/dim_employee",
								"sp_name": "silver.sp_silver_dim_employee"
							},
							{
								"folder_path": "silver/dim_geography",
								"sp_name": "silver.sp_silver_dim_geography"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-05T14:02:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_synapse_adls_silver')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sales_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_Load_Silver_Products')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimProduct",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dimProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimProduct": {},
									"DimProductSubcategory": {},
									"DimCategory": {},
									"SilverDimProduct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Stored procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ProcessDimProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[sp_silver_dim_product]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sales_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-10T19:40:40Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/dimProduct')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sales_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_hhz')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/fact_sales",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_l34')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/fact_sales",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_hhz')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ap203storageaccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fact/processed/FactInternetSales",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ProductKey",
						"type": "UTF8"
					},
					{
						"name": "OrderDateKey",
						"type": "UTF8"
					},
					{
						"name": "CustomerKey",
						"type": "UTF8"
					},
					{
						"name": "SalesTerritoryKey",
						"type": "UTF8"
					},
					{
						"name": "SalesOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "SalesOrderLineNumber",
						"type": "UTF8"
					},
					{
						"name": "OrderQuantity",
						"type": "UTF8"
					},
					{
						"name": "ProductStandardCost",
						"type": "UTF8"
					},
					{
						"name": "SalesAmount",
						"type": "UTF8"
					},
					{
						"name": "OrderDate",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_ap203storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_l34')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ap203storageaccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fact/processed/FactInternetSales",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ProductKey",
						"type": "UTF8"
					},
					{
						"name": "OrderDateKey",
						"type": "UTF8"
					},
					{
						"name": "CustomerKey",
						"type": "UTF8"
					},
					{
						"name": "SalesTerritoryKey",
						"type": "UTF8"
					},
					{
						"name": "SalesOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "SalesOrderLineNumber",
						"type": "UTF8"
					},
					{
						"name": "OrderQuantity",
						"type": "UTF8"
					},
					{
						"name": "ProductStandardCost",
						"type": "UTF8"
					},
					{
						"name": "SalesAmount",
						"type": "UTF8"
					},
					{
						"name": "OrderDate",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_ap203storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dim_ProductCategory')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimProductCategory.csv",
						"folderPath": "dim_files",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductCategoryKey",
						"type": "String"
					},
					{
						"name": "ProductCategoryAlternateKey",
						"type": "String"
					},
					{
						"name": "EnglishProductCategoryName",
						"type": "String"
					},
					{
						"name": "SpanishProductCategoryName",
						"type": "String"
					},
					{
						"name": "FrenchProductCategoryName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dim_ProductSubcategory')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimProductSubcategory.csv",
						"folderPath": "dim_files",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductSubcategoryKey",
						"type": "String"
					},
					{
						"name": "ProductSubcategoryAlternateKey",
						"type": "String"
					},
					{
						"name": "EnglishProductSubcategoryName",
						"type": "String"
					},
					{
						"name": "SpanishProductSubcategoryName",
						"type": "String"
					},
					{
						"name": "FrenchProductSubcategoryName",
						"type": "String"
					},
					{
						"name": "ProductCategoryKey",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dim_product')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimProduct.csv",
						"folderPath": "dim_files",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductKey",
						"type": "String"
					},
					{
						"name": "ProductAlternateKey",
						"type": "String"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "String"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "EnglishProductName",
						"type": "String"
					},
					{
						"name": "SpanishProductName",
						"type": "String"
					},
					{
						"name": "FrenchProductName",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "String"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "String"
					},
					{
						"name": "ReorderPoint",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeRange",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "String"
					},
					{
						"name": "DaysToManufacture",
						"type": "String"
					},
					{
						"name": "ProductLine",
						"type": "String"
					},
					{
						"name": "DealerPrice",
						"type": "String"
					},
					{
						"name": "Class",
						"type": "String"
					},
					{
						"name": "Style",
						"type": "String"
					},
					{
						"name": "ModelName",
						"type": "String"
					},
					{
						"name": "LargePhoto",
						"type": "String"
					},
					{
						"name": "EnglishDescription",
						"type": "String"
					},
					{
						"name": "FrenchDescription",
						"type": "String"
					},
					{
						"name": "ChineseDescription",
						"type": "String"
					},
					{
						"name": "ArabicDescription",
						"type": "String"
					},
					{
						"name": "HebrewDescription",
						"type": "String"
					},
					{
						"name": "ThaiDescription",
						"type": "String"
					},
					{
						"name": "GermanDescription",
						"type": "String"
					},
					{
						"name": "JapaneseDescription",
						"type": "String"
					},
					{
						"name": "TurkishDescription",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "EndDate",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_processed_fact')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ap203storageaccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fact/processed/FactInternetSales",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ProductKey",
						"type": "UTF8"
					},
					{
						"name": "OrderDateKey",
						"type": "UTF8"
					},
					{
						"name": "CustomerKey",
						"type": "UTF8"
					},
					{
						"name": "SalesTerritoryKey",
						"type": "UTF8"
					},
					{
						"name": "SalesOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "SalesOrderLineNumber",
						"type": "UTF8"
					},
					{
						"name": "OrderQuantity",
						"type": "UTF8"
					},
					{
						"name": "ProductStandardCost",
						"type": "UTF8"
					},
					{
						"name": "SalesAmount",
						"type": "UTF8"
					},
					{
						"name": "OrderDate",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_ap203storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_processed_fact_sales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/fact_sales",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerKey",
						"type": "INT_32"
					},
					{
						"name": "GeographyKey",
						"type": "INT_32"
					},
					{
						"name": "Customer Name",
						"type": "UTF8"
					},
					{
						"name": "BirthDate",
						"type": "DATE"
					},
					{
						"name": "MaritalStatus",
						"type": "UTF8"
					},
					{
						"name": "Gender",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_dim_product')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/dim_product",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_synapse_adls_silver')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsestorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder_path",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerKey",
						"type": "INT_32"
					},
					{
						"name": "GeographyKey",
						"type": "INT_32"
					},
					{
						"name": "Customer Name",
						"type": "UTF8"
					},
					{
						"name": "BirthDate",
						"type": "DATE"
					},
					{
						"name": "MaritalStatus",
						"type": "UTF8"
					},
					{
						"name": "Gender",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ap203workspacesynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ap203workspacesynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ap203workspacesynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ap203workspacesynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_ap203keyvault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_ap203keyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_ap203storageaccount')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_ap203storageaccount_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_ap203storageaccount_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sales_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('ls_serverless_sales_ldw_properties_typeProperties_server')]",
					"database": "[parameters('ls_serverless_sales_ldw_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsestorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapsestorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dimProduct')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dim_product",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_ProductSubcategory",
								"type": "DatasetReference"
							},
							"name": "DimProductSubcategory"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "DimCategory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver_dim_product",
								"type": "DatasetReference"
							},
							"name": "SilverDimProduct",
							"rejectedDataLinkedService": {
								"referenceName": "ls_synapsestorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "SelectProductColumns"
						},
						{
							"name": "CastProductCoulmn"
						},
						{
							"name": "SelectSubCategoryColumns"
						},
						{
							"name": "JoinCategorywithSubCategory"
						},
						{
							"name": "SelectCategoryData"
						},
						{
							"name": "JoinProductandCategory"
						},
						{
							"name": "castCategoryColumns"
						},
						{
							"name": "SelectCategoryColumns",
							"description": "Renaming DimCategory to select1 with EnglishProductCategoryName, SpanishProductCategoryName, FrenchProductCategoryName'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as string,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as string,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as string,",
						"          FinishedGoodsFlag as string,",
						"          Color as string,",
						"          SafetyStockLevel as string,",
						"          ReorderPoint as string,",
						"          ListPrice as string,",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as string,",
						"          DaysToManufacture as string,",
						"          ProductLine as string,",
						"          DealerPrice as string,",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as string,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as string,",
						"          EndDate as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimProduct",
						"source(output(",
						"          ProductSubcategoryKey as string,",
						"          ProductSubcategoryAlternateKey as string,",
						"          EnglishProductSubcategoryName as string,",
						"          SpanishProductSubcategoryName as string,",
						"          FrenchProductSubcategoryName as string,",
						"          ProductCategoryKey as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimProductSubcategory",
						"source(output(",
						"          ProductCategoryKey as string,",
						"          ProductCategoryAlternateKey as string,",
						"          EnglishProductCategoryName as string,",
						"          SpanishProductCategoryName as string,",
						"          FrenchProductCategoryName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimCategory",
						"DimProduct select(mapColumn(",
						"          ProductKey,",
						"          ProductSubcategoryKey,",
						"          EnglishProductName,",
						"          Color,",
						"          ModelName,",
						"          Status,",
						"          StandardCost",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProductColumns",
						"SelectProductColumns derive(ProductKey = toInteger(ProductKey),",
						"          ProductSubcategoryKey = toInteger(ProductSubcategoryKey)) ~> CastProductCoulmn",
						"DimProductSubcategory select(mapColumn(",
						"          ProductSubcategoryKey,",
						"          EnglishProductSubcategoryName,",
						"          ProductCategoryKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSubCategoryColumns",
						"SelectSubCategoryColumns, SelectCategoryColumns join(SelectSubCategoryColumns@ProductCategoryKey == SelectCategoryColumns@ProductCategoryKey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCategorywithSubCategory",
						"JoinCategorywithSubCategory select(mapColumn(",
						"          ProductCategoryKey = SelectSubCategoryColumns@ProductCategoryKey,",
						"          ProductSubcategoryKey,",
						"          EnglishProductCategoryName,",
						"          EnglishProductSubcategoryName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCategoryData",
						"CastProductCoulmn, castCategoryColumns join(CastProductCoulmn@ProductSubcategoryKey == castCategoryColumns@ProductSubcategoryKey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinProductandCategory",
						"SelectCategoryData derive(ProductSubcategoryKey = toInteger(ProductSubcategoryKey)) ~> castCategoryColumns",
						"DimCategory select(mapColumn(",
						"          ProductCategoryKey,",
						"          EnglishProductCategoryName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCategoryColumns",
						"JoinProductandCategory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductKey,",
						"          ProductSubcategoryKey = CastProductCoulmn@ProductSubcategoryKey,",
						"          EnglishProductName,",
						"          Color,",
						"          ModelName,",
						"          Status,",
						"          StandardCost,",
						"          ProductCategoryKey,",
						"          ProductSubcategoryKey = castCategoryColumns@ProductSubcategoryKey,",
						"          EnglishProductCategoryName,",
						"          EnglishProductSubcategoryName",
						"     )) ~> SilverDimProduct"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_dim_product')]",
				"[concat(variables('workspaceId'), '/datasets/ds_dim_ProductSubcategory')]",
				"[concat(variables('workspaceId'), '/datasets/ds_dim_ProductCategory')]",
				"[concat(variables('workspaceId'), '/datasets/ds_silver_dim_product')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsestorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_DimCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.dim_customer') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.dim_customer;\t\n\nCREATE EXTERNAL TABLE bronze.dim_customer(    \n    [CustomerKey] [int],\n\t[GeographyKey] [int],\n\t[CustomerAlternateKey] [nvarchar](15),\n\t[Title] [nvarchar](8),\n\t[FirstName] [nvarchar](50),\n\t[MiddleName] [nvarchar](50),\n\t[LastName] [nvarchar](50),\n\t[NameStyle] [bit],\n\t[BirthDate] [date],\n\t[MaritalStatus] [nchar](1),\n\t[Suffix] [nvarchar](10),\n\t[Gender] [nvarchar](1),\n\t[EmailAddress] [nvarchar](50),\n\t[YearlyIncome] [money],\n\t[TotalChildren] [tinyint],\n\t[NumberChildrenAtHome] [tinyint],\n\t[EnglishEducation] [nvarchar](40),\n\t[SpanishEducation] [nvarchar](40),\n\t[FrenchEducation] [nvarchar](40),\n\t[EnglishOccupation] [nvarchar](100),\n\t[SpanishOccupation] [nvarchar](100),\n\t[FrenchOccupation] [nvarchar](100),\n\t[HouseOwnerFlag] [nchar](1),\n\t[NumberCarsOwned] [tinyint],\n\t[AddressLine1] [nvarchar](120),\n\t[AddressLine2] [nvarchar](120),\n\t[Phone] [nvarchar](20),\n\t[DateFirstPurchase] [date],\n\t[CommuteDistance] [nvarchar](15) )\nWITH ( \n        LOCATION = 'dim_files/DimCustomer.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = psv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/dim_customer'\n    );\n\nSELECT TOP 10 * FROM bronze.dim_customer;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_DimDate')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.dim_date') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.dim_date;\t\n\nCREATE EXTERNAL TABLE bronze.dim_date(    \n\t[DateKey] [int],\n\t[FullDateAlternateKey] [date],\n\t[DayNumberOfWeek] [tinyint] ,\n\t[EnglishDayNameOfWeek] [nvarchar](10),\n\t[SpanishDayNameOfWeek] [nvarchar](10),\n\t[FrenchDayNameOfWeek] [nvarchar](10),     \n\t[DayNumberOfMonth] [tinyint],\n\t[DayNumberOfYear] [smallint],\n\t[WeekNumberOfYear] [tinyint],\n\t[EnglishMonthName] [nvarchar](10),\n\t[SpanishMonthName] [nvarchar](10),\n\t[FrenchMonthName] [nvarchar](10),\n\t[MonthNumberOfYear] [tinyint],\n\t[CalendarQuarter] [tinyint],\n\t[CalendarYear] [smallint],\n\t[CalendarSemester] [tinyint],\n\t[FiscalQuarter] [tinyint],\n\t[FiscalYear] [smallint],\n\t[FiscalSemester] [tinyint])\nWITH ( \n        LOCATION = 'dim_files/DimDate.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = psv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/dim_date'\n    );\n\nSELECT TOP 10 * FROM bronze.dim_date;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_DimEmployee')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.dim_employee') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.dim_employee;\t\n\nCREATE EXTERNAL TABLE bronze.dim_employee(    \n    [EmployeeKey] [int],\n\t[ParentEmployeeKey] [int],\n\t[EmployeeNationalIDAlternateKey] [nvarchar](15),\n\t[ParentEmployeeNationalIDAlternateKey] [nvarchar](15),\n\t[SalesTerritoryKey] [int],\n\t[FirstName] [nvarchar](50),\n\t[LastName] [nvarchar](50),\n\t[MiddleName] [nvarchar](50),\n\t[NameStyle] [bit],\n\t[Title] [nvarchar](50),\n\t[HireDate] [date],\n\t[BirthDate] [date],\n\t[LoginID] [nvarchar](256),\n\t[EmailAddress] [nvarchar](50),\n\t[Phone] [nvarchar](25),\n\t[MaritalStatus] [nchar](1),\n\t[EmergencyContactName] [nvarchar](50),\n\t[EmergencyContactPhone] [nvarchar](25),\n\t[SalariedFlag] [bit],\n\t[Gender] [nchar](1),\n\t[PayFrequency] [tinyint],\n\t[BaseRate] [money],\n\t[VacationHours] [smallint],\n\t[SickLeaveHours] [smallint],\n\t[CurrentFlag] [bit],\n\t[SalesPersonFlag] [bit],\n\t[DepartmentName] [nvarchar](50),\n\t[StartDate] [date],\n\t[EndDate] [date],\n\t[Status] [nvarchar](50),\n\t[EmployeePhoto] [varbinary](max))\nWITH ( \n        LOCATION = 'dim_files/DimEmployee.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = psv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/dim_employee'\n    );\n\nSELECT TOP 10 * FROM bronze.dim_employee;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_DimGeography')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.dim_geography') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.dim_geography;\t\n\nCREATE EXTERNAL TABLE bronze.dim_geography(    \n\t[GeographyKey] [int],\n\t[City] [nvarchar](30),\n\t[StateProvinceCode] [nvarchar](3),\n\t[StateProvinceName] [nvarchar](50),\n\t[CountryRegionCode] [nvarchar](3),\n\t[EnglishCountryRegionName] [nvarchar](50),\n\t[SpanishCountryRegionName] [nvarchar](50),\n\t[FrenchCountryRegionName] [nvarchar](50),\n\t[PostalCode] [nvarchar](15),\n\t[SalesTerritoryKey] [int],\n\t[IpAddressLocator] [nvarchar](15))\nWITH ( \n        LOCATION = 'dim_files/DimGeography.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = psv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/dim_geography'\n    );\n\nSELECT TOP 10 * FROM bronze.dim_geography;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_DimProductCategory')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.dim_product_category') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.dim_product_category;\t\n\nCREATE EXTERNAL TABLE bronze.dim_product_category(    \n\t[ProductCategoryKey] [int],\n\t[ProductCategoryAlternateKey] [int],\n\t[EnglishProductCategoryName] [nvarchar](50),\n\t[SpanishProductCategoryName] [nvarchar](50),\n\t[FrenchProductCategoryName] [nvarchar](50))\nWITH ( \n        LOCATION = 'dim_files/DimProductCategory.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/dim_product_category'\n    );\n\nSELECT TOP 10 * FROM bronze.dim_product_category;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_DimProductSubcategory')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.dim_product_subcategory') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.dim_product_subcategory;\t\n\nCREATE EXTERNAL TABLE bronze.dim_product_subcategory(    \n\t[ProductSubcategoryKey] [int],\n\t[ProductSubcategoryAlternateKey] [int],\n\t[EnglishProductSubcategoryName] [nvarchar](50),\n\t[SpanishProductSubcategoryName] [nvarchar](50),\n\t[FrenchProductSubcategoryName] [nvarchar](50),\n\t[ProductCategoryKey] [int])\nWITH ( \n        LOCATION = 'dim_files/DimProductSubcategory.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/dim_product_subcategory'\n    );\n\nSELECT TOP 10 * FROM bronze.dim_product_subcategory;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_DimProduct_Incomplete')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.dim_product') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.dim_product;\t\n\nCREATE EXTERNAL TABLE bronze.dim_product(    \n\t[ProductKey] [int] 1,               \n\t[ProductAlternateKey] [nvarchar](25) 2,\n\t[ProductSubcategoryKey] [int] 3,           \n\t[WeightUnitMeasureCode] [nchar](3) 4,\n\t[SizeUnitMeasureCode] [nchar](3) 5,\n\t[EnglishProductName] [nvarchar](50) 6,     \n\t[SpanishProductName] [nvarchar](50) 7,\n\t[FrenchProductName] [nvarchar](50) 8,\n\t[StandardCost] [money] 9,        \n\t[FinishedGoodsFlag] [bit] 10,\n\t[Color] [nvarchar](15) 11,         \n\t[SafetyStockLevel] [smallint] 12,\n\t[ReorderPoint] [smallint] 13,\n\t[ListPrice] [money] 14,\n\t[Size] [nvarchar](50) 15,\n\t[SizeRange] [nvarchar](50) 16,\n\t[Weight] [float] 17,\n\t[DaysToManufacture] [int] 18,\n\t[ProductLine] [nchar](2) 19,\n\t[DealerPrice] [money] 20,\n\t[Class] [nchar](2) 21,\n\t[Style] [nchar](2) 22,\n\t[ModelName] [nvarchar](50) 23,         \n\t[LargePhoto] [varbinary](max) NULL 24,\n\t[EnglishDescription] [nvarchar](400) 25,\n\t[FrenchDescription] [nvarchar](400) 26,\n\t[ChineseDescription] [nvarchar](400) 27,\n\t[ArabicDescription] [nvarchar](400) 28,\n\t[HebrewDescription] [nvarchar](400) 29,\n\t[ThaiDescription] [nvarchar](400) 30,\n\t[GermanDescription] [nvarchar](400) 31,\n\t[JapaneseDescription] [nvarchar](400) 32,\n\t[TurkishDescription] [nvarchar](400) 33,\n\t[StartDate] [datetime] 34,\n\t[EndDate] [datetime] 35,\n\t[Status] [nvarchar](7) 36))  \nWITH ( \n        LOCATION = 'dim_files/DimProduct.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/dim_product'\n    );\n\nSELECT TOP 10 * FROM bronze.dim_product;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_DimSalesTerritory')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.dim_sales_territory') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.dim_sales_territory;\t\n\nCREATE EXTERNAL TABLE bronze.dim_sales_territory(    \n\t[SalesTerritoryKey] [int],\n\t[SalesTerritoryAlternateKey] [int],\n\t[SalesTerritoryRegion] [nvarchar](50),\n\t[SalesTerritoryCountry] [nvarchar](50),\n\t[SalesTerritoryGroup] [nvarchar](50))\nWITH ( \n        LOCATION = 'dim_files/DimSalesTerritory.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = psv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/dim_sales_territory'\n    );\n\nSELECT TOP 10 * FROM bronze.dim_sales_territory;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Bronze_FactInternetSales')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "2Bronze_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nIF OBJECT_ID('bronze.fact_internet_sales') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.fact_internet_sales;\t\n\nCREATE EXTERNAL TABLE bronze.fact_internet_sales(    \n\t[ProductKey] [int],\n\t[OrderDateKey] [int],\n\t[DueDateKey] [int],\n\t[ShipDateKey] [int],\n\t[CustomerKey] [int],\n\t[PromotionKey] [int],\n\t[CurrencyKey] [int],\n\t[SalesTerritoryKey] [int],\n\t[SalesOrderNumber] [nvarchar](20),\n\t[SalesOrderLineNumber] [tinyint],\n\t[RevisionNumber] [tinyint],\n\t[OrderQuantity] [smallint],\n\t[UnitPrice] [money],\n\t[ExtendedAmount] [money],\n\t[UnitPriceDiscountPct] [float],\n\t[DiscountAmount] [float],\n\t[ProductStandardCost] [money],\n\t[TotalProductCost] [money],\n\t[SalesAmount] [money],\n\t[TaxAmt] [money],\n\t[Freight] [money],\n\t[CarrierTrackingNumber] [nvarchar](25),\n\t[CustomerPONumber] [nvarchar](25),\n\t[OrderDate] [datetime],\n\t[DueDate] [datetime],\n\t[ShipDate] [datetime])\nWITH ( \n        LOCATION = 'fact_files/FactInternetSales.csv',  \n        DATA_SOURCE = sales_data_src,  \n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/fact_internet_sales'\n    );\n\nSELECT TOP 10 * FROM bronze.fact_internet_sales;     ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Gold_Customer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4Gold_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE gold.sp_gold_customer\nAS\nBEGIN\n    IF OBJECT_ID('gold.customer') IS NOT NULL\n        DROP EXTERNAL TABLE gold.customer;\n\n\n\nCREATE EXTERNAL TABLE gold.customer\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'gold/customer',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n  g.[Country Name], \n  g.[SalesTerritoryRegion] as [Region], \n  g.[SalesTerritoryGroup] as [Group],\n  YEAR(CAST(s.[OrderDate] AS date)) AS [Order Year], \n  SUM(s.[OrderQuantity]) as [Total Order], \n  SUM(s.[SalesAmount]) as [Total Revenue]\nFROM \n  silver.fact_internet_sales s\nJOIN  silver.dim_customer c ON c.[CustomerKey] = s.[CustomerKey]\nJOIN  silver.dim_geography g ON g.[GeographyKey] = c.[GeographyKey]\nGROUP BY g.[Country Name], g.[SalesTerritoryRegion], g.[SalesTerritoryGroup],YEAR(CAST(s.[OrderDate] AS date));\n\nEND;\n\nEXEC gold.sp_gold_customer;\nSELECT * FROM gold.customer;\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Gold_Employee')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4Gold_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE gold.sp_gold_employee\nAS\nBEGIN\n    IF OBJECT_ID('gold.employee') IS NOT NULL\n        DROP EXTERNAL TABLE gold.employee;\n\n\n\nCREATE EXTERNAL TABLE gold.employee\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'gold/employee',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n  e.[EmployeeKey], \n  e.[SalesTerritoryKey], \n  e.[Title], \n  e.[MaritalStatus], \n  e.[Gender], \n  e.[DepartmentName],\n  g.[Country Name], \n  g.[SalesTerritoryRegion] as [Region], \n  g.[SalesTerritoryGroup] as [Group] \nFROM \n  silver.dim_employee e\nLEFT JOIN  silver.dim_geography g ON g.[SalesTerritoryKey] = e.[SalesTerritoryKey];\n\nEND;\n\nEXEC gold.sp_gold_employee;\nSELECT * FROM gold.employee;\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Gold_Product')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4Gold_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE gold.sp_gold_product\nAS\nBEGIN\n    IF OBJECT_ID('gold.product') IS NOT NULL\n        DROP EXTERNAL TABLE gold.product;\n\n\n\nCREATE EXTERNAL TABLE gold.product\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'gold/product',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT \n    s.[ProductKey],\n    SUM(s.[OrderQuantity]) as [Total Orders],\n    p.[EnglishProductName] as [ProductName],\n    p.[EnglishProductCategoryName] as [CategoryName],\n    p.[EnglishProductSubcategoryName] as [SubcategoryName]\nFROM silver.fact_internet_sales s\nLEFT JOIN silver.dim_product p\nON s.[ProductKey] = p.[ProductKey]\nGROUP BY s.[ProductKey],p.[EnglishProductName],p.[EnglishProductCategoryName],p.[EnglishProductSubcategoryName];\n\nEND;\n\nEXEC gold.sp_gold_product;\nSELECT * FROM gold.product;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Gold_Sales')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "4Gold_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE gold.sp_gold_sales\nAS\nBEGIN\n    IF OBJECT_ID('gold.sales') IS NOT NULL\n        DROP EXTERNAL TABLE gold.sales;\n\n\n\nCREATE EXTERNAL TABLE gold.sales\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'gold/sales',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n  SUM(SalesAmount) as [Total Revenue],\n  SUM(ProductStandardCost) as [Total Cost],\n  SUM(SalesAmount)-SUM(ProductStandardCost) as [Profit],\n  SUM(SalesAmount)-SUM(ProductStandardCost)/SUM(SalesAmount) as [Profit Margin %],\n  COUNT(DISTINCT(CustomerKey)) as [Total Customers],\n  count(*) as [Total Transaction]\nFROM \n  bronze.fact_internet_sales;\n\nEND;\n\nEXEC gold.sp_gold_sales;\nSELECT * FROM gold.sales;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Silver_DimCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3Silver_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_dim_customer\nAS\nBEGIN\n    IF OBJECT_ID('silver.dim_customer') IS NOT NULL\n        DROP EXTERNAL TABLE silver.dim_customer;\n\n\n\nCREATE EXTERNAL TABLE silver.dim_customer\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'silver/dim_customer',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n  [CustomerKey], \n  [GeographyKey], \n  CONCAT(firstname, ' ', lastname) as [Customer Name], \n  [BirthDate], \n  CASE WHEN MaritalStatus = 'M' THEN 'Married' WHEN MaritalStatus = 'S' THEN 'Single' END as MaritalStatus, \n  CASE WHEN Gender = 'M' THEN 'Male' WHEN Gender = 'F' THEN 'Female' END AS Gender \nFROM bronze.dim_customer;\n\nEND;\n\nEXEC silver.sp_silver_dim_customer;\nSELECT * FROM silver.dim_customer;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Silver_DimDate')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3Silver_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_dim_date\nAS\nBEGIN\n    IF OBJECT_ID('silver.dim_date') IS NOT NULL\n        DROP EXTERNAL TABLE silver.dim_date;\n\n\n\nCREATE EXTERNAL TABLE silver.dim_date\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'silver/dim_date',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n  [DateKey], \n  [FullDateAlternateKey], \n  [EnglishDayNameOfWeek], \n  [EnglishMonthName], \n  [CalendarYear], \n  [MonthNumberOfYear] \nFROM bronze.dim_date;\n\nEND;\n\nEXEC silver.sp_silver_dim_date;\nSELECT * FROM silver.dim_date;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Silver_DimEmployee')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3Silver_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_dim_employee\nAS\nBEGIN\n    IF OBJECT_ID('silver.dim_employee') IS NOT NULL\n        DROP EXTERNAL TABLE silver.dim_employee;\n\n\n\nCREATE EXTERNAL TABLE silver.dim_employee\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'silver/dim_employee',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n  [EmployeeKey], \n  [SalesTerritoryKey], \n  CONCAT(firstname, ' ', lastname) as [Employee Name], \n  [Title], \n  CASE WHEN MaritalStatus = 'M' THEN 'Married' WHEN MaritalStatus = 'S' THEN 'Single' END as MaritalStatus, \n  CASE WHEN Gender = 'M' THEN 'Male' WHEN Gender = 'F' THEN 'Female' END AS Gender, \n  [DepartmentName] \nFROM bronze.dim_employee;\n\nEND;\n\nEXEC silver.sp_silver_dim_employee;\nSELECT * FROM silver.dim_employee;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Silver_DimGeography')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3Silver_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_dim_geography\nAS\nBEGIN\n    IF OBJECT_ID('silver.dim_geography') IS NOT NULL\n        DROP EXTERNAL TABLE silver.dim_geography;\n\n\n\nCREATE EXTERNAL TABLE silver.dim_geography\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'silver/dim_geography',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n  [GeographyKey], \n  [City], \n  [EnglishCountryRegionName] AS [Country Name], \n  [SalesTerritoryRegion], \n  [SalesTerritoryGroup], \n  [PostalCode], \n  g.[SalesTerritoryKey] \nFROM \n  bronze.dim_geography g \n  JOIN bronze.dim_sales_territory t ON g.SalesTerritoryKey = t.SalesTerritoryKey;\n\nEND;\n\nEXEC silver.sp_silver_dim_geography;\nSELECT * FROM silver.dim_geography;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Silver_DimProduct')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3Silver_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_dim_product\nAS\nBEGIN\n    IF OBJECT_ID('silver.dim_product') IS NOT NULL\n        DROP EXTERNAL TABLE silver.dim_product;\n\n\nCREATE EXTERNAL TABLE silver.dim_product(    \n\t[ProductKey] [int],\n  [ProductSubcategoryKey] [int] , \n  [EnglishProductName] [nvarchar](50), \n  [Color] [nvarchar](15),\n  [ModelName] [nvarchar](50), \n  [Status] [nvarchar](400), \n  [StandardCost] [nvarchar](10),\n  [ProductCategoryKey] [nvarchar](10), \n  [EnglishProductCategoryName] [nvarchar](50), \n  [EnglishProductSubcategoryName] [varchar](50))\nWITH ( \n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'silver/dim_product',\n        FILE_FORMAT = parquet_file_format\n    );\n\nEND;\n\nEXEC silver.sp_silver_dim_product;\nSELECT * FROM silver.dim_product;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SP_Silver_FactInternetSales')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "3Silver_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_fact_internet_sales\nAS\nBEGIN\n    IF OBJECT_ID('silver.fact_internet_sales') IS NOT NULL\n        DROP EXTERNAL TABLE silver.fact_internet_sales;\n\n\n\nCREATE EXTERNAL TABLE silver.fact_internet_sales\n    WITH\n    (\n        DATA_SOURCE = sales_data_src,\n        LOCATION = 'silver/fact_internet_sales',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n  [ProductKey], \n  [OrderDateKey], \n  [CustomerKey], \n  [SalesTerritoryKey], \n  [SalesOrderNumber], \n  [SalesOrderLineNumber], \n  [OrderQuantity], \n  [ProductStandardCost], \n  [SalesAmount], \n  CAST([OrderDate] AS date) AS OrderDate\nFROM \n  bronze.fact_internet_sales;\n\nEND;\n\nEXEC silver.sp_silver_fact_internet_sales;\nSELECT * FROM silver.fact_internet_sales;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Script1_Analysis_Dimfiles_Queries')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE DATABASE sales_db;\n--DROP DATABASE sales_db;\n\nUSE sales_db;\nALTER DATABASE sales_db COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n--DROP EXTERNAL DATA SOURCE sales_data_dimension\nCREATE EXTERNAL DATA SOURCE sales_data_dimension\nWITH(\n    LOCATION = 'abfss://data@ap203synapsestorage.dfs.core.windows.net/dim_files'\n)\n\n--DimDate.csv\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'DimDate.csv',\n        DATA_SOURCE = 'sales_data_dimension',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        DateKey INT 1,\n        FullDateAlternateKey DATE 2, \n        EnglishDayNameOfWeek VARCHAR(10) 4, \n        EnglishMonthName VARCHAR(10) 10, \n        CalendarYear SMALLINT 15, \n        MonthNumberOfYear TINYINT 13\n\n    )\n    AS [result];\n\n\n--DimCustomer.csv\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'DimCustomer.csv',\n        DATA_SOURCE = 'sales_data_dimension',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '|',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        CustomerKey INT 1,\n        GeographyKey INT 2,\n        firstname VARCHAR(50) 5,\n        lastname VARCHAR(50) 7,\n        BirthDate DATE 9,\n        MaritalStatus CHAR(1) 10,\n        Gender CHAR(1) 12\n    )\n    AS [result];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Script1_Create_LDW')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1LDW_Scripts"
				},
				"content": {
					"query": "CREATE DATABASE sales_ldw;\nGO\n\nUSE sales_ldw;\nGO\n\nALTER DATABASE sales_ldw COLLATE Latin1_General_100_CI_AI_SC_UTF8;\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Script2_Data_Source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1LDW_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\nDROP EXTERNAL DATA SOURCE sales_data_src\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'sales_data_src')\n    CREATE EXTERNAL DATA SOURCE sales_data_src\n    WITH\n    (    LOCATION = 'https://ap203synapsestorage.blob.core.windows.net/data'\n    );\n\nSELECT * FROM sys.external_data_sources    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Script3_File_Formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "1LDW_Scripts"
				},
				"content": {
					"query": "USE sales_ldw;\nGO\n\n--PSV with parser version 1.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='psv_file_format_pv1')\n  CREATE EXTERNAL FILE FORMAT psv_file_format_pv1 \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = '|'  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '1.0' )   \n      );\n\n--CSV with parser version 1.0\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='csv_file_format_pv1')\n  CREATE EXTERNAL FILE FORMAT csv_file_format_pv1 \n  WITH (  \n      FORMAT_TYPE = DELIMITEDTEXT,\n      FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = ','  \n      , STRING_DELIMITER = '\"'\n      , First_Row = 2\n      , USE_TYPE_DEFAULT = FALSE \n      , Encoding = 'UTF8'\n      , PARSER_VERSION = '1.0' )   \n      );\n\n--parquet with SnappyCodec compression\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='parquet_file_format')\n  CREATE EXTERNAL FILE FORMAT parquet_file_format  \n  WITH (  \n        FORMAT_TYPE = PARQUET,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n       );\n       \nSELECT * FROM sys.external_file_formats      ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ap203SparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Nb_Gold_Sales_Result')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e20d3d76-225b-4a33-9a43-0445381f328d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Sales Data Aggregation \n",
							"### Group By Columns\n",
							"1. year\n",
							"2. Month\n",
							"3. Pickup Location ID\n",
							"4. Drop Off Location ID\n",
							"\n",
							"### Aggregated Columns\n",
							"1. Total Trip Count\n",
							"2. Total Fare Amount\n",
							"\n",
							"### Purpose of the notebook\n",
							"1. Create the aggregated table in Spark Pool\n",
							"2. Access the data from Serverless SQL Pool "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the folder paths so that it can be used later. \n",
							"bronze_folder_path = 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/raw'\n",
							"silver_folder_path = 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/silver'\n",
							"gold_folder_path = 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/gold'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the spark config to be able to get the partitioned columns year and month as strings rather than integers\n",
							"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"-- Create database to which we are going to write the data\n",
							"\n",
							"CREATE DATABASE IF NOT EXISTS nyc_taxi_ldw_spark\n",
							"LOCATION 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/gold';"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read the silver data to be processed. \n",
							"trip_data_green_df = spark.read.parquet(f\"{silver_folder_path}/trip_data_green\") "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations\n",
							"# 1. Total trip count\n",
							"# 2. Total fare amount\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"trip_data_green_agg_df = trip_data_green_df \\\n",
							"                        .groupBy(\"year\", \"month\", \"pu_location_id\", \"do_location_id\") \\\n",
							"                        .agg(count(lit(1)).alias(\"total_trip_count\"),\n",
							"                        round(sum(\"fare_amount\"), 2).alias(\"total_fare_amount\"))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write the aggregated data to the gold table for consumption\n",
							"\n",
							"trip_data_green_agg_df.write.mode(\"overwrite\").partitionBy(\"year\", \"month\").format(\"parquet\").saveAsTable(\"nyc_taxi_ldw_spark.trip_data_green_agg\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		}
	]
}