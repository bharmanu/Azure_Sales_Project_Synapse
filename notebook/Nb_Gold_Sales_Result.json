{
	"name": "Nb_Gold_Sales_Result",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ap203SparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "42e8d014-af03-41e9-84a8-32b955319254"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e99fa65c-212f-494d-ab10-301304443a40/resourceGroups/azureProjectResourceGroup/providers/Microsoft.Synapse/workspaces/ap203workspacesynapse/bigDataPools/ap203SparkPool",
				"name": "ap203SparkPool",
				"type": "Spark",
				"endpoint": "https://ap203workspacesynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ap203SparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Purpose of the notebook\n",
					"1. Create the aggregated table in Spark Pool\n",
					"2. Access the data from Serverless SQL Pool "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Set the folder paths\n",
					"silver_folder_path = 'abfss://data@ap203synapsestorage.dfs.core.windows.net/silver'\n",
					"gold_folder_path = 'abfss://data@ap203synapsestorage.dfs.core.windows.net/gold'"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Set the spark config\n",
					"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- Create database to which we are going to write the data\n",
					"\n",
					"CREATE DATABASE IF NOT EXISTS sales_ldw_spark\n",
					"LOCATION 'abfss://data@ap203synapsestorage.dfs.core.windows.net/gold';"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read the silver data to be processed. \n",
					"sales_df = spark.read.parquet(f\"{silver_folder_path}/fact_internet_sales\") \n",
					"sales_df = spark.read.parquet(f\"{silver_folder_path}/fact_internet_sales\") "
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Perform the required aggregations\n",
					"from pyspark.sql.functions import *\n",
					"\n",
					"sales_agg_df = sales_df \\\n",
					"                .groupBy(\"CustomerKey\",\"Year\",\"Month\") \\\n",
					"                .agg(count(lit(1)).alias(\"customer_count\"), \\\n",
					"                round(sum(\"SalesAmount\"), 2).alias(\"Revenue\"), \\\n",
					"                round(sum(\"ProductStandardCost\"), 2).alias(\"Cost\"), \\\n",
					"                sum(\"SalesAmount\")-sum(\"ProductStandardCost\").alias(\"Profit\"), \\\n",
					"                sum(\"SalesAmount\")-sum(\"ProductStandardCost\")/sum(\"SalesAmount\").alias(\"ProfitMargin\"))"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write the aggregated data to the gold table for consumption\n",
					"\n",
					"sales_agg_df.write.mode(\"overwrite\").partitionBy(\"Year\", \"Month\").format(\"parquet\").saveAsTable(\"sales_ldw_spark.sales_agg\")"
				],
				"execution_count": 36
			}
		]
	}
}